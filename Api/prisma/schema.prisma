generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  full_name      String
  email_address  String              @unique
  phone_number   String
  password       String
  role           Role // Added field to store user role
  addresses      UserAddress[]
  paymentMethods UserPaymentMethod[]
  reviews        UserReview[]
  shoppingCart   ShoppingCart?
  orders         ShopOrder[]
  wishlist       Wishlist[]
  otp            OTP[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  supportTickets SupportTicket[]
  activityLogs   UserActivityLog[]
  orderStatusHistory OrderStatusHistory[]
}

model UserAddress {
  id         Int     @id @default(autoincrement())
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  addressId  Int
  address    Address @relation(fields: [addressId], references: [id])
  is_default Boolean @default(false)
}

model Address {
  id            Int           @id @default(autoincrement())
  unit_number   String?
  street_number String?
  address_line1 String
  address_line2 String?
  city          String
  region        String
  postal_code   String
  country_id    Int
  country       Country       @relation(fields: [country_id], references: [id])
  userAddresses UserAddress[]
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  addresses Address[]
}

model UserPaymentMethod {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  user                User                 @relation(fields: [userId], references: [id])
  paymentTypeId       Int
  paymentType         PaymentType          @relation(fields: [paymentTypeId], references: [id])
  provider            String
  account_number      String
  expiry_date         DateTime
  is_default          Boolean              @default(false)
  orders              ShopOrder[]
  paymentTransactions PaymentTransaction[] // Added reverse relation field
}

model PaymentType {
  id             Int                 @id @default(autoincrement())
  value          String @unique
  paymentMethods UserPaymentMethod[]
}

model Product {
  id            Int             @id @default(autoincrement())
  categoryId    Int
  category      ProductCategory @relation(fields: [categoryId], references: [id])
  name          String
  description   String 
  product_image String
  productItems  ProductItem[]
}

model ProductItem {
  id             Int                    @id @default(autoincrement())
  productId      Int
  product        Product                @relation(fields: [productId], references: [id])
  SKU            String
  qty_in_stock   Int
  product_image  String
  price          Float
  orderLines     OrderLine[]
  cartItems      ShoppingCartItem[]
  configurations ProductConfiguration[]
  wishlist       Wishlist[]
  reviews        UserReview[]
}

model ProductCategory {
  id                 Int                 @id @default(autoincrement())
  parent_category_id Int?
  category_name      String
  products           Product[]
  promotions         PromotionCategory[]
  variations         Variation[]
  parentCategory     ProductCategory?    @relation("CategoryRelation", fields: [parent_category_id], references: [id])
  subCategories      ProductCategory[]   @relation("CategoryRelation")
}


model ProductConfiguration {
  productItemId     Int
  productItem       ProductItem     @relation(fields: [productItemId], references: [id])
  variationOptionId Int
  variationOption   VariationOption @relation(fields: [variationOptionId], references: [id])

  @@id([productItemId, variationOptionId])
}


model VariationOption {
  id             Int                    @id @default(autoincrement())
  variationId    Int
  variation      Variation              @relation(fields: [variationId], references: [id])
  value          String
  configurations ProductConfiguration[]
}

model Variation {
  id         Int               @id @default(autoincrement())
  categoryId Int
  category   ProductCategory   @relation(fields: [categoryId], references: [id])
  name       String
  options    VariationOption[]
}

model ShopOrder {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  user                User                 @relation(fields: [userId], references: [id])
  order_date          DateTime
  payment_method_id   Int
  paymentMethod       UserPaymentMethod    @relation(fields: [payment_method_id], references: [id])
  shipping_address    Int
  shippingMethodId    Int
  shippingMethod      ShippingMethod       @relation(fields: [shippingMethodId], references: [id])
  order_total         Float
  order_status_id     Int
  order_status        OrderStatus          @relation(fields: [order_status_id], references: [id])
  orderLines          OrderLine[]
  discountCodeId      Int?
  discountCode        DiscountCode?        @relation(fields: [discountCodeId], references: [id])
  paymentTransactions PaymentTransaction[]
  statusHistory       OrderStatusHistory[]
}

model OrderLine {
  id            Int         @id @default(autoincrement())
  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  orderId       Int
  order         ShopOrder   @relation(fields: [orderId], references: [id])
  qty           Int
  price         Float
}

model OrderStatus {
  id     Int         @id @default(autoincrement())
  status String
  orders ShopOrder[]
}

model ShippingMethod {
  id     Int         @id @default(autoincrement())
  name   String
  price  Float
  orders ShopOrder[]
}

model ShoppingCart {
  id     Int                @id @default(autoincrement())
  userId Int                @unique
  user   User               @relation(fields: [userId], references: [id])
  items  ShoppingCartItem[]
}

model ShoppingCartItem {
  id            Int          @id @default(autoincrement())
  cartId        Int
  cart          ShoppingCart @relation(fields: [cartId], references: [id])
  productItemId Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  qty           Int
}

model UserReview {
  id               Int         @id @default(autoincrement())
  userId           Int
  user             User        @relation(fields: [userId], references: [id])
  orderedProductId Int
  orderedProduct   ProductItem @relation(fields: [orderedProductId], references: [id])
  rating_value     Int
  comment          String
}

model Wishlist {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
}

model Promotion {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String
  discount_rate       Float
  start_date          DateTime
  end_date            DateTime
  promotionCategories PromotionCategory[]
}

model PromotionCategory {
  categoryId  Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  promotionId Int
  promotion   Promotion       @relation(fields: [promotionId], references: [id])

  @@id([categoryId, promotionId])
}

model DiscountCode {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  description String?
  discount    Float
  validFrom   DateTime
  validTo     DateTime
  usageLimit  Int?
  usedCount   Int         @default(0)
  orders      ShopOrder[]
}

model PaymentTransaction {
  id              Int               @id @default(autoincrement())
  orderId         Int
  order           ShopOrder         @relation(fields: [orderId], references: [id])
  amount          Float
  transactionDate DateTime          @default(now())
  status          String
  paymentMethod   UserPaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
}

model OrderStatusHistory {
  id           Int      @id @default(autoincrement())
  orderId      Int
  order        ShopOrder @relation(fields: [orderId], references: [id])
  previousStatus String
  newStatus    String
  changedAt    DateTime @default(now())
  changedById  Int? // 
  changedBy    User?  @relation(fields: [changedById], references: [id])
  reason       String? // Optional: reason for change
  automated    Boolean @default(false) // True if change was system-initiated
}


model SupportTicket {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  subject   String
  message   String
  status    String   @default("Open")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model UserActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  activity  String
  timestamp DateTime @default(now())
}

model OTP {
  id                  Int      @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  otp                 String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  expiration_datetime DateTime
}
